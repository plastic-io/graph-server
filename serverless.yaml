service: plastic-io-graph-server
plugins:
  - serverless-webpack
provider:
  name: aws
  runtime: nodejs18.x
  versionFunctions: false
  stackName: ${self:service}
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-1'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource:
        - "arn:aws:s3:::${self:custom.s3Bucket}/*"
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource:
        - "arn:aws:s3:::${self:custom.s3Bucket}"
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
  environment:
    API_REGION: ${self:provider.region}
    S3_BUCKET: ${self:custom.s3Bucket}
    STAGE: ${self:provider.stage}

  websocketsApiName: "${self:custom.prefix}-${self:provider.stage}-plastic-ws"

custom:
  prefix: ${opt:prefix, 'plastic'}
  s3Bucket: ${self:service}

functions:
  # manage connection and disconnection of clients
  connect:
    handler: src/handler.connect
    events:
      - websocket:
          route: $connect

  disconnect:
    handler: src/handler.disconnect
    events:
      - websocket:
          route: $disconnect

  subscribe:
    handler: src/handler.subscribe
    events:
      - websocket:
          route: subscribe

  unsubscribe:
    handler: src/handler.unsubscribe
    events:
      - websocket:
          route: unsubscribe

  sendToConnection:
    handler: src/handler.sendToConnection
    events:
      - websocket:
          route: sendToConnection

  sendToChannel:
    handler: src/handler.sendToChannel
    events:
      - websocket:
          route: sendToChannel

  broadcast:
    handler: src/handler.broadcast
    events:
      - websocket:
          route: broadcast

  addEvent:
    handler: src/handler.addEvent
    timeout: 30
    events:
      - websocket:
          route: addEvent
      - http:
          method: POST
          path: /addEvent
          cors:
            origin: '*'

  listSubscribers:
    handler: src/handler.listSubscribers
    events:
      - websocket:
          route: listSubscribers

  listSubscriptions:
    handler: src/handler.listSubscriptions
    events:
      - websocket:
          route: listSubscriptions

  graphWs:
    handler: src/handler.getGraphWs
    events:
      - websocket:
          route: getGraph

  publishNodeWs:
    handler: src/handler.publishNodeWs
    timeout: 30
    events:
      - websocket:
          route: publishNode

  publishGraphWs:
    handler: src/handler.publishGraphWs
    timeout: 30
    events:
      - websocket:
          route: publishGraph

  deleteGraphWs:
    handler: src/handler.deleteGraphWs
    timeout: 30
    events:
      - websocket:
          route: deleteGraph

  events:
    handler: src/handler.getEvents
    timeout: 30
    events:
      - http:
          method: GET
          path: /events/{id}
          request:
            parameters:
               paths:
                 id: true
                 version: true
          cors:
            origin: '*'

  artifact:
    handler: src/handler.getArtifact
    timeout: 30
    events:
      - http:
          method: GET
          path: /artifacts/{id}/{version}
          request:
            parameters:
               paths:
                 id: true
                 version: true
          cors:
            origin: '*'

  graph:
    handler: src/handler.getGraph
    timeout: 30
    events:
      - http:
          method: GET
          path: /graph/{id}/{version}
          request:
            parameters:
               paths:
                 id: true
                 version: true
          cors:
            origin: '*'

  toc:
    handler: src/handler.getToc
    timeout: 30
    events:
      - http:
          method: GET
          path: /toc.json
          cors:
            origin: '*'

  deleteGraph:
    handler: src/handler.deleteGraph
    timeout: 30
    events:
      - http:
          method: DELETE
          path: /graph/{id}
          request:
            parameters:
               paths:
                 id: true
                 version: true
          cors:
            origin: '*'

  # all other routes are passed to graph execution
  default:
    handler: src/handler.defaultRoute
    timeout: 30
    events:
      - http:
          method: ANY
          path: /{proxy+}
          cors:
            origin: '*'
      - websocket:
          route: $default

resources:
  Resources:
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketName: ${self:custom.s3Bucket}
  Outputs:
    Prefix:
      Value: ${self:custom.prefix}
